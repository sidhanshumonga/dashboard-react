{"version":3,"sources":["components/topbar/topbar.js","CONSTANTS.js","components/dialog-box/location/location.js","components/Loader/Loader.js","components/dialog-box/date/weekly-date.js","Utils.js","components/selection-box/selection.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","topPanel","backgroundColor","menuButton","marginRight","spacing","title","Topbar","classes","className","AppBar","position","Toolbar","IconButton","edge","aria-label","Typography","variant","DIALOG_TYPE","PARAMETERS","PERIOD_TYPE","DATE_FORMATS","LOGO","height","maxWidth","selected","content","background","Location","props","React","useState","setSelectedItem","TreeView","defaultCollapseIcon","defaultExpanded","defaultExpandIcon","renderTree","nodes","func","TreeItem","key","id","nodeId","label","name","onLabelClick","e","Array","isArray","children","map","node","tree","v","preventDefault","onSelect","Loader","xmlns","version","in","stdDeviation","result","mode","values","Component","WeeklyDate","state","selectedDate","Date","makeJSDateObject","date","clone","toDate","handleWeekChange","setState","startOfWeek","formatWeekSelectLabel","invalidLabel","dateClone","isValid","format","renderWrappedWeekDay","dayInCurrentMonth","selectedDateClone","start","end","endOfWeek","dayIsBetween","isWithinInterval","isFirstDay","isSameDay","isLastDay","wrapperClassName","clsx","highlight","firstHighlight","endHighlight","dayClassName","day","nonCurrentMonthDay","highlightNonCurrentMonthDay","modalShow","setModalShow","this","utils","MomentUtils","DatePicker","value","renderDay","labelFunc","open","TextFieldComponent","PureComponent","styles","createStyles","dayWrapper","width","fontSize","typography","caption","margin","color","customDayHighlight","top","bottom","left","right","border","palette","secondary","main","borderRadius","text","disabled","primary","common","white","extend","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","borderBottomRightRadius","withStyles","getStartAndEndDates","type","CONSTANTS","startDate","moment","endDate","add","month","year","icon","checkedIcon","sleep","delay","Promise","resolve","setTimeout","Transition","forwardRef","ref","Slide","direction","params","a","requestOptions","method","headers","body","JSON","stringify","fetch","Utils","response","json","data","console","log","Selection","setSelectedDate","selectedFormattedDate","setSelectedFormattedDate","periodType","setPeriodType","sixMonthlyType","setSixMonthlyType","selectedLocation","setSelectedLocation","selectedIndicators","setSelectedIndicators","AutocompleteOpen","setAutocompleteOpen","AutocompleteOptions","setAutocompleteOptions","indicatorsLoading","length","DialogOpen","setDialogOpen","DialogType","setDialogType","chartsLoading","setChartsLoading","sixMonthlyPopup","setSixMonthlyPopup","setData","handleDateChange","handleClickOpen","handleClose","loadingStart","sendSearchParsms","orgunit_name","orgunit_id","indicators","i","resetStates","handleSixMonthlyClose","idx","useEffect","active","x","organisationUnits","Row","Col","Form","Autocomplete","multiple","freeSolo","onOpen","onClose","getOptionSelected","option","getOptionLabel","options","getOptionDisabled","disableCloseOnSelect","loading","onChange","event","updateIndicatorsArray","renderOption","Fragment","Checkbox","style","checked","renderInput","TextField","InputProps","endAdornment","CircularProgress","size","Button","onClick","currentTarget","Menu","keepMounted","anchorEl","Boolean","MenuItem","Dialog","fullWidth","TransitionComponent","scroll","aria-labelledby","aria-describedby","DialogTitle","DialogContent","dividers","DialogContentText","tabIndex","location","DialogActions","views","disableFuture","KeyboardButtonProps","App","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fd162f79.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  topPanel: {\n      backgroundColor: '#1976d2'\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function Topbar() {\n        const classes = useStyles();\n        return (\n            <div className={classes.root}>\n            <AppBar position=\"static\" className={classes.topPanel}>\n                <Toolbar>\n                <IconButton edge=\"start\" className={classes.menuButton} aria-label=\"menu\">\n                </IconButton>\n                <Typography variant=\"h6\" className={classes.title}>\n                    INTERACTIVE DASHBOARD\n                </Typography>\n                </Toolbar>\n            </AppBar>\n            </div>\n        )\n}\n","export const indicators = \"api/v1.0/indicator\";\nexport const dataelements = \"api/v1.0/dataelement\";\nexport const orgunits = \"api/v1.0/orgunit\";\nexport const postSearchReq = \"api/v1.0/search\";\n\nexport const DIALOG_TYPE = {\n    LOCATION : 'location',\n    DATE : 'date'\n}\n\nexport const PARAMETERS = {\n  SELECT_LOCATION: \"Select Location\",\n  SELECT_PERIOD: \"Select Period\",\n  SELECT_DATE: \"Select Date\",\n  SELECT_YEAR: \"Select Year\",\n  SELECT_MONTH: \"Select Month\",\n  SELECT_WEEK: \"Select Week\",\n};\n\nexport const PERIOD_TYPE = {\n  WEEKLY: \"Weekly\",\n  WEEKLY_WEDNESDAY: \"WeeklyWednesday\",\n  MONTHLY: \"Monthly\",\n  QUARTERLY: \"Quarterly\",\n  SIX_MONTHLY: \"SixMonthly\",\n  FINANCIAL_APRIL: \"FinancialApril\",\n  YEARLY: \"Yearly\",\n};\n\nexport const DATE_FORMATS = {\n    YEARLY: 'YYYY',\n    MONTHLY: 'MMM YYYY',\n    WEEKLY: 'MMM DD, YYYY',\n    DAILY: 'MMM DD, YYYY',\n    API_FORMAT: 'DD-MM-YYYY'\n}\n\nexport const LOGO = {\n  CHECK: \"check\",\n  ADD: \"add\",\n};\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TreeView from \"@material-ui/lab/TreeView\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport TreeItem from \"@material-ui/lab/TreeItem\";\nimport './location.css';\n\nconst useStyles = makeStyles({\n  root: {\n    height: 350,\n    flexGrow: 1,\n    maxWidth: 400,\n  },\n  selected: {\n    content : {\n      background: 'blue'\n    }\n  }\n});\n\nconst renderTree = (nodes, func, classes) => (\n  <TreeItem key={nodes.id} nodeId={nodes.id} label={nodes.name} onLabelClick={(e) => func(e, nodes)} classes={{selected: classes.selected}}>\n    {Array.isArray(nodes.children)\n      ? nodes.children.map((node) => renderTree(node, func, classes))\n      : null}\n  </TreeItem>\n);\n\nexport default function Location(props) {\n  const classes = useStyles();\n  const [selectedItem, setSelectedItem] = React.useState({});\n\n  const updateNode = (e,v) => {\n    e.preventDefault()\n    setSelectedItem(v);\n    props.onSelect(v);\n  }\n \n\n  return (\n    <TreeView\n      className={classes.root}\n      defaultCollapseIcon={<ExpandMoreIcon />}\n      defaultExpanded={[\"root\"]}\n      defaultExpandIcon={<ChevronRightIcon />}\n    >\n      {renderTree(props.tree, updateNode, classes)}\n    </TreeView>\n  );\n}\n","import React from 'react';\nimport './Loader.css'\n\nexport default class Loader extends React.Component {\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"dot dot-1\"></div>\n                <div className=\"dot dot-2\"></div>\n                <div className=\"dot dot-3\"></div>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n                    <defs>\n                        <filter id=\"goo\">\n                            <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"10\" result=\"blur\" />\n                            <feColorMatrix in=\"blur\" mode=\"matrix\" values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 21 -7\" />\n                        </filter>\n                    </defs>\n                </svg>\n            </div>\n        )\n    }\n}","import clsx from \"clsx\";\nimport format from \"date-fns/format\";\nimport isValid from \"date-fns/isValid\";\nimport isSameDay from \"date-fns/isSameDay\";\nimport endOfWeek from \"date-fns/endOfWeek\";\nimport React, { PureComponent } from \"react\";\nimport startOfWeek from \"date-fns/startOfWeek\";\nimport isWithinInterval from \"date-fns/isWithinInterval\";\nimport { DatePicker } from \"@material-ui/pickers\";\nimport { createStyles } from \"@material-ui/styles\";\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport MomentUtils from \"@date-io/moment\";\n// this guy required only on the docs site to work with dynamic date library\nimport { IconButton, withStyles } from \"@material-ui/core\";\n\nclass WeeklyDate extends PureComponent {\n  constructor() {\n    super();\n    this.state = { modalShow: false, setModalShow: false, selected: null };\n  }\n  state = {\n    selectedDate: new Date(),\n  };\n\n  makeJSDateObject = (date) => {\n    return date.clone().toDate();\n  };\n\n  handleWeekChange = (date) => {\n    this.setState({ selectedDate: startOfWeek(this.makeJSDateObject(date)) });\n  };\n\n  formatWeekSelectLabel = (date, invalidLabel) => {\n    let dateClone = this.makeJSDateObject(date);\n\n    return dateClone && isValid(dateClone)\n      ? `Week of ${format(startOfWeek(dateClone), \"MMM do\")}`\n      : invalidLabel;\n  };\n\n  renderWrappedWeekDay = (date, selectedDate, dayInCurrentMonth) => {\n    const { classes } = this.props;\n    let dateClone = this.makeJSDateObject(date);\n    let selectedDateClone = this.makeJSDateObject(selectedDate);\n\n    const start = startOfWeek(selectedDateClone);\n    const end = endOfWeek(selectedDateClone);\n\n    const dayIsBetween = isWithinInterval(dateClone, { start, end });\n    const isFirstDay = isSameDay(dateClone, start);\n    const isLastDay = isSameDay(dateClone, end);\n\n    const wrapperClassName = clsx({\n      [classes.highlight]: dayIsBetween,\n      [classes.firstHighlight]: isFirstDay,\n      [classes.endHighlight]: isLastDay,\n    });\n\n    const dayClassName = clsx(classes.day, {\n      [classes.nonCurrentMonthDay]: !dayInCurrentMonth,\n      [classes.highlightNonCurrentMonthDay]: !dayInCurrentMonth && dayIsBetween,\n    });\n\n    return (\n      <div className={wrapperClassName}>\n        <IconButton className={dayClassName}>\n          <span> {format(dateClone, \"d\")} </span>\n        </IconButton>\n      </div>\n    );\n  };\n\n  render() {\n    const { selectedDate } = this.state;\n\n    return (\n      <MuiPickersUtilsProvider utils={MomentUtils}>\n        <DatePicker\n          {...this.props}\n          label=\"Week picker\"\n          value={selectedDate}\n          // onChange={this.handleWeekChange}\n          renderDay={this.renderWrappedWeekDay}\n          labelFunc={this.formatWeekSelectLabel}\n          open={this.props.open}\n          TextFieldComponent={() => null}\n        />\n      </MuiPickersUtilsProvider>\n    );\n  }\n}\n\nconst styles = createStyles((theme) => ({\n  dayWrapper: {\n    position: \"relative\",\n  },\n  day: {\n    width: 36,\n    height: 36,\n    fontSize: theme.typography.caption.fontSize,\n    margin: \"0 2px\",\n    color: \"inherit\",\n  },\n  customDayHighlight: {\n    position: \"absolute\",\n    top: 0,\n    bottom: 0,\n    left: \"2px\",\n    right: \"2px\",\n    border: `1px solid ${theme.palette.secondary.main}`,\n    borderRadius: \"50%\",\n  },\n  nonCurrentMonthDay: {\n    color: theme.palette.text.disabled,\n  },\n  highlightNonCurrentMonthDay: {\n    color: \"#676767\",\n  },\n  highlight: {\n    background: theme.palette.primary.main,\n    color: theme.palette.common.white,\n  },\n  firstHighlight: {\n    extend: \"highlight\",\n    borderTopLeftRadius: \"50%\",\n    borderBottomLeftRadius: \"50%\",\n  },\n  endHighlight: {\n    extend: \"highlight\",\n    borderTopRightRadius: \"50%\",\n    borderBottomRightRadius: \"50%\",\n  },\n}));\n\nexport default withStyles(styles)(WeeklyDate);\n","import * as CONSTANTS from \"./CONSTANTS.js\";\nimport moment from \"moment\";\n\nexport const getBaseUrl = () => {\n  const baseUrl = \"https://who.aeturn.dev/\"; //server calls\n\n  return baseUrl;\n};\n\nexport const makeJSDateObject = (date) => {\n  let dateTo = moment(date).format(CONSTANTS.DATE_FORMATS.WEEKLY);\n  let dateFrom = moment(date).add(7, \"d\").format(CONSTANTS.DATE_FORMATS.WEEKLY);\n  return dateTo + \" to \" + dateFrom;\n};\n\nexport const getStartAndEndDates = (date, type) => {\n  switch (type) {\n    case CONSTANTS.PERIOD_TYPE.WEEKLY: {\n      let dateTo = moment(date).format(CONSTANTS.DATE_FORMATS.API_FORMAT);\n      let dateFrom = moment(date)\n        .add(7, \"d\")\n        .format(CONSTANTS.DATE_FORMATS.API_FORMAT);\n      return { startDate: dateTo, endDate: dateFrom };\n    }\n\n    case CONSTANTS.PERIOD_TYPE.MONTHLY: {\n      let month = moment(date).format(\"M\");\n      let year = moment(date).format(\"YYYY\");\n      if (\n        month === \"1\" ||\n        month === \"3\" ||\n        month === \"5\" ||\n        month === \"7\" ||\n        month === \"8\" ||\n        month === \"10\" ||\n        month === \"12\"\n      ) {\n        if (\n          month === \"1\" ||\n          month === \"3\" ||\n          month === \"5\" ||\n          month === \"7\" ||\n          month === \"8\"\n        ) {\n          return {\n            startDate: \"01-0\" + month + '-' + year,\n            endDate: \"31-0\" + month + '-' + year,\n          };\n        } else {\n          return {\n            startDate: \"01-\" + month + '-' + year,\n            endDate: \"31-\" + month + '-' + year,\n          };\n        }\n      } else if (\n        month === \"4\" ||\n        month === \"6\" ||\n        month === \"9\" ||\n        month === \"11\"\n      ) {\n        if (month === \"4\" || month === \"6\" || month === \"9\") {\n          return {\n            startDate: \"01-0\" + month + '-' + year,\n            endDate: \"30-0\" + month + '-' + year,\n          };\n        } else {\n          return {\n            startDate: \"01-\" + month + '-' + year,\n            endDate: \"30-\" + month + '-' + year,\n          };\n        }\n      } else if (month === \"2\") {\n        return {\n          startDate: \"01-0\" + month + '-' + year,\n          endDate: \"29-0\" + month + '-' + year,\n        };\n      }\n      break;\n    }\n    case CONSTANTS.PERIOD_TYPE.SIX_MONTHLY: {\n      let month = moment(date).format(\"M\");\n      let year = moment(date).format(\"YYYY\");\n      if (month < 7) {\n        return {\n          startDate: \"01-01-\" + year,\n          endDate: \"30-06-\" + year,\n        };\n      } else {\n        return {\n          startDate: \"01-07-\" + year,\n          endDate: \"31-12-\" + year,\n        };\n      }\n    }\n    case CONSTANTS.PERIOD_TYPE.QUARTERLY: {\n      break;\n    }\n    case CONSTANTS.PERIOD_TYPE.YEARLY: {\n      let year = moment(date).format(\"YYYY\");\n      return {\n        startDate: \"01-01-\" + year,\n        endDate: \"31-12-\" + year,\n      };\n    }\n    default: {\n    }\n  }\n};\n","import React from \"react\";\nimport { Form, Row, Col } from \"react-bootstrap\";\nimport Button from \"@material-ui/core/Button\";\nimport \"./selection.css\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport * as CONSTANTS from \"../../CONSTANTS.js\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport moment from \"moment\";\nimport MomentUtils from \"@date-io/moment\";\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport { DatePicker } from \"@material-ui/pickers\";\nimport Location from \"../dialog-box/location/location.js\";\nimport Slide from \"@material-ui/core/Slide\";\nimport Loader from \"../Loader/Loader.js\";\nimport CheckBoxOutlineBlankIcon from \"@material-ui/icons/CheckBoxOutlineBlank\";\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\nimport WeeklyDate from \"../dialog-box/date/weekly-date\";\nimport * as Utils from '../../Utils.js'\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\n\nfunction sleep(delay = 0) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, delay);\n  });\n}\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nasync function sendSearchParsms(params) {\n  const requestOptions = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(params),\n  };\n  const response = await fetch(\n    Utils.getBaseUrl() + CONSTANTS.postSearchReq,\n    requestOptions\n  );\n  const data = await response.json();\n  console.log(data);\n}\n\nexport default function Selection() {\n  const [selectedDate, setSelectedDate] = React.useState();\n  const [selectedFormattedDate, setSelectedFormattedDate] = React.useState();\n  const [periodType, setPeriodType] = React.useState(\"\");\n  const [sixMonthlyType, setSixMonthlyType] = React.useState();\n  const [selectedLocation, setSelectedLocation] = React.useState({});\n  const [selectedIndicators, setSelectedIndicators] = React.useState([]);\n  const [AutocompleteOpen, setAutocompleteOpen] = React.useState(false);\n  const [AutocompleteOptions, setAutocompleteOptions] = React.useState([]);\n  const indicatorsLoading =\n    AutocompleteOpen && AutocompleteOptions.length === 0;\n\n  const [DialogOpen, setDialogOpen] = React.useState(false);\n  const [DialogType, setDialogType] = React.useState(\n    CONSTANTS.DIALOG_TYPE.LOCATION\n  );\n  const [chartsLoading, setChartsLoading] = React.useState(false);\n\n  const [sixMonthlyPopup, setSixMonthlyPopup] = React.useState(null);\n  const [tree, setData] = React.useState({});\n\n  const handleDateChange = (date) => {\n    if (date) {\n      setSelectedDate(date);\n      setSelectedFormattedDate(\n        periodType === CONSTANTS.PERIOD_TYPE.MONTHLY\n          ? moment(date).format(CONSTANTS.DATE_FORMATS.MONTHLY)\n          : periodType === CONSTANTS.PERIOD_TYPE.YEARLY ||\n            periodType === CONSTANTS.PERIOD_TYPE.SIX_MONTHLY\n          ? moment(date).format(CONSTANTS.DATE_FORMATS.YEARLY)\n          : periodType === CONSTANTS.PERIOD_TYPE.WEEKLY\n          ? Utils.makeJSDateObject(date)\n          : moment(date).format(CONSTANTS.DATE_FORMATS.DAILY)\n      );\n    }\n    setDialogOpen(false);\n  };\n\n  const handleWeekChange = (date) => {\n    handleDateChange(date);\n  };\n\n  const updateLocation = (location) => {\n    setSelectedLocation(location);\n  };\n\n  const handleClickOpen = (type) => {\n    setDialogOpen(true);\n    setDialogType(type);\n  };\n\n  const handleClose = () => {\n    setSelectedLocation(\"\");\n    setDialogOpen(false);\n  };\n\n  const handleSave = () => {\n    setDialogOpen(false);\n  };\n\n  const loadingStart = () => {\n    setChartsLoading(true);\n    const payload = {\n      date: Utils.getStartAndEndDates(selectedDate, periodType),\n      orgunit_name: selectedLocation.name,\n      orgunit_id: selectedLocation.id,\n      indicators: selectedIndicators.map((i) => i.name),\n    };\n    sendSearchParsms(payload);\n  };\n\n  const updateIndicatorsArray = (indicators) => {\n    setSelectedIndicators(indicators);\n    if (indicators.length > 0) {\n      setPeriodType(indicators[0].periodType);\n    } else {\n      resetStates();\n    }\n  };\n\n  const resetStates = () => {\n    setPeriodType(\"\");\n    setSelectedDate();\n  };\n\n  const handleSixMonthlyPopup = (event) => {\n    setSixMonthlyPopup(event.currentTarget);\n  };\n\n  const handleSixMonthlyClose = (idx) => {\n    setSixMonthlyType(idx);\n    setSixMonthlyPopup(null);\n    if(periodType === CONSTANTS.PERIOD_TYPE.SIX_MONTHLY) {\n      let year = moment(selectedDate).format(CONSTANTS.DATE_FORMATS.YEARLY)\n      if(idx == 1) {\n        setSelectedDate(moment('01-01-' + year).format(CONSTANTS.DATE_FORMATS.API_FORMAT));\n      }\n      else {\n        setSelectedDate(moment('01-07-' + year).format(CONSTANTS.DATE_FORMATS.API_FORMAT));\n      }\n    }\n  };\n\n  React.useEffect(() => {\n    let active = true;\n\n    if (!indicatorsLoading) {\n      return undefined;\n    }\n\n    (async () => {\n      const response = await fetch(\n        Utils.getBaseUrl() + CONSTANTS.dataelements\n      );\n      await sleep(1000); // For demo purposes.\n      const data = await response.json();\n\n      if (active) {\n        setAutocompleteOptions(\n          data.map((x) => {\n            return {\n              ...x,\n              periodType: x.periodType[0]\n                ? x.periodType[0] === CONSTANTS.PERIOD_TYPE.FINANCIAL_APRIL\n                  ? CONSTANTS.PERIOD_TYPE.YEARLY\n                  : x.periodType[0] === CONSTANTS.PERIOD_TYPE.WEEKLY_WEDNESDAY\n                  ? CONSTANTS.PERIOD_TYPE.WEEKLY\n                  : x.periodType[0]\n                : \"\",\n            };\n          })\n        );\n      }\n    })();\n\n    return () => {\n      active = false;\n    };\n  }, [indicatorsLoading]);\n\n  React.useEffect(() => {\n    if (!AutocompleteOpen) {\n      setAutocompleteOptions([]);\n    }\n  }, [AutocompleteOpen]);\n\n  React.useEffect(() => {\n    (async () => {\n      const response = await fetch(Utils.getBaseUrl() + CONSTANTS.orgunits);\n      const result = await response.json();\n      const tree = result.organisationUnits[0];\n      setData(tree);\n    })();\n  }, []);\n\n  return (\n    <div>\n      <Row className=\"justify-content-center align-items-center\">\n        <Col className=\"col-8 mt-5\">\n          <Form>\n            <Autocomplete\n              id=\"asynchronous-demo\"\n              multiple\n              freeSolo\n              open={AutocompleteOpen}\n              onOpen={() => {\n                setAutocompleteOpen(true);\n              }}\n              onClose={() => {\n                setAutocompleteOpen(false);\n              }}\n              getOptionSelected={(option, value) => option.name === value.name}\n              getOptionLabel={(option) => option.name}\n              options={AutocompleteOptions}\n              getOptionDisabled={(option) =>\n                selectedIndicators[0] &&\n                option.periodType !== selectedIndicators[0].periodType\n              }\n              disableCloseOnSelect\n              loading={indicatorsLoading}\n              onChange={(event, value) => updateIndicatorsArray(value)}\n              renderOption={(option, { selected }) => (\n                <React.Fragment>\n                  <Checkbox\n                    icon={icon}\n                    checkedIcon={checkedIcon}\n                    style={{ marginRight: 8 }}\n                    checked={selected}\n                  />\n                  {option.name}\n                  <Col className=\"text-right periodTypeInList\">\n                    {option.periodType}\n                  </Col>\n                </React.Fragment>\n              )}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Search Indicators\"\n                  variant=\"outlined\"\n                  InputProps={{\n                    ...params.InputProps,\n                    endAdornment: (\n                      <React.Fragment>\n                        {indicatorsLoading ? (\n                          <CircularProgress color=\"inherit\" size={20} />\n                        ) : null}\n                        {params.InputProps.endAdornment}\n                      </React.Fragment>\n                    ),\n                  }}\n                />\n              )}\n            />\n          </Form>\n        </Col>\n      </Row>\n      <Row className=\"justify-content-center\">\n        <Col className=\"col-5 mt-3 text-left\">\n          <Button\n            variant=\"contained\"\n            className={\"mr-2\" + (selectedLocation.name ? \" btn-checked\" : \"\")}\n            onClick={() => handleClickOpen(CONSTANTS.DIALOG_TYPE.LOCATION)}\n          >\n            <i className=\"material-icons\">\n              {selectedLocation.name\n                ? CONSTANTS.LOGO.CHECK\n                : CONSTANTS.LOGO.ADD}\n            </i>\n            {selectedLocation.name\n              ? selectedLocation.name\n              : CONSTANTS.PARAMETERS.SELECT_LOCATION}\n          </Button>\n          <Button\n            variant=\"contained\"\n            className={\"mx-2\" + (selectedDate ? \" btn-checked\" : \"\")}\n            onClick={() => handleClickOpen(CONSTANTS.DIALOG_TYPE.DATE)}\n          >\n            <i className=\"material-icons\">\n              {selectedDate ? CONSTANTS.LOGO.CHECK : CONSTANTS.LOGO.ADD}\n            </i>\n            {selectedDate\n              ? selectedFormattedDate\n              : periodType === CONSTANTS.PERIOD_TYPE.YEARLY ||\n                periodType === CONSTANTS.PERIOD_TYPE.SIX_MONTHLY\n              ? CONSTANTS.PARAMETERS.SELECT_YEAR\n              : periodType === CONSTANTS.PERIOD_TYPE.MONTHLY\n              ? CONSTANTS.PARAMETERS.SELECT_MONTH\n              : periodType === CONSTANTS.PERIOD_TYPE.WEEKLY\n              ? CONSTANTS.PARAMETERS.SELECT_WEEK\n              : CONSTANTS.PARAMETERS.SELECT_DATE}\n          </Button>\n          {periodType === CONSTANTS.PERIOD_TYPE.SIX_MONTHLY ? (\n            <Button\n              variant=\"contained\"\n              className={\"mx-2\" + (sixMonthlyType ? \" btn-checked\" : \"\")}\n              onClick={handleSixMonthlyPopup}\n            >\n              <i className=\"material-icons\">\n                {sixMonthlyType ? CONSTANTS.LOGO.CHECK : CONSTANTS.LOGO.ADD}\n              </i>\n              {sixMonthlyType === 1\n                ? \"January - June\"\n                : sixMonthlyType === 2\n                ? \"July - December\"\n                : CONSTANTS.PARAMETERS.SELECT_PERIOD}\n            </Button>\n          ) : null}\n          <Menu\n            id=\"simple-menu\"\n            keepMounted\n            anchorEl={sixMonthlyPopup}\n            open={Boolean(sixMonthlyPopup)}\n            onClose={handleSixMonthlyClose}\n          >\n            <MenuItem onClick={(event) => handleSixMonthlyClose(1)}>\n              January - June\n            </MenuItem>\n            <MenuItem onClick={(event) => handleSixMonthlyClose(2)}>\n              July - December\n            </MenuItem>\n          </Menu>\n        </Col>\n        <Col className=\"col-3 text-right mt-3 d-flex justify-content-end\">\n          <Col className=\"mx-2 mt-1\">Clear dashboard</Col>\n          <Button\n            variant=\"contained\"\n            className=\"btn-primary\"\n            onClick={() => loadingStart()}\n          >\n            Add\n          </Button>\n        </Col>\n      </Row>\n      <Dialog\n        open={DialogOpen && DialogType === CONSTANTS.DIALOG_TYPE.LOCATION}\n        onClose={handleClose}\n        fullWidth={true}\n        maxWidth=\"sm\"\n        TransitionComponent={Transition}\n        scroll={\"paper\"}\n        aria-labelledby=\"scroll-dialog-title\"\n        aria-describedby=\"scroll-dialog-description\"\n      >\n        <DialogTitle id=\"scroll-dialog-title\">\n          {DialogType === CONSTANTS.DIALOG_TYPE.LOCATION\n            ? CONSTANTS.PARAMETERS.SELECT_LOCATION\n            : CONSTANTS.PARAMETERS.SELECT_DATE}\n        </DialogTitle>\n        <DialogContent dividers={true}>\n          <DialogContentText id=\"scroll-dialog-description\" tabIndex={-1}>\n            <Location onSelect={updateLocation} tree={tree}></Location>\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleSave} color=\"primary\">\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n      {/* Date picker here */}\n\n      {periodType === CONSTANTS.PERIOD_TYPE.MONTHLY ? (\n        <MuiPickersUtilsProvider utils={MomentUtils}>\n          <DatePicker\n            views={[\"year\", \"month\"]}\n            label=\"Year and Month\"\n            value={selectedDate}\n            open={DialogOpen && DialogType === \"date\"}\n            onChange={handleDateChange}\n            onClose={handleDateChange}\n            TextFieldComponent={() => null}\n          />\n        </MuiPickersUtilsProvider>\n      ) : periodType === CONSTANTS.PERIOD_TYPE.YEARLY || periodType === CONSTANTS.PERIOD_TYPE.SIX_MONTHLY ? (\n        <MuiPickersUtilsProvider utils={MomentUtils}>\n          <DatePicker\n            views={[\"year\"]}\n            label=\"Year only\"\n            value={selectedDate}\n            open={DialogOpen && DialogType === CONSTANTS.DIALOG_TYPE.DATE}\n            onChange={handleDateChange}\n            onClose={handleDateChange}\n            TextFieldComponent={() => null}\n          />\n        </MuiPickersUtilsProvider>\n      ) : periodType === \"Weekly\" ? (\n        <WeeklyDate\n          open={DialogOpen && DialogType === CONSTANTS.DIALOG_TYPE.DATE}\n          onChange={handleWeekChange}\n          onClose={handleDateChange}\n        />\n      ) : (\n        <MuiPickersUtilsProvider utils={MomentUtils}>\n          <DatePicker\n            margin=\"normal\"\n            disableFuture\n            id=\"date-picker-dialog\"\n            label=\"Date picker dialog\"\n            format=\"MM/dd/yyyy\"\n            value={selectedDate}\n            onChange={handleDateChange}\n            onClose={handleDateChange}\n            KeyboardButtonProps={{\n              \"aria-label\": \"change date\",\n            }}\n            open={DialogOpen && DialogType === CONSTANTS.DIALOG_TYPE.DATE}\n            TextFieldComponent={() => null}\n          />\n        </MuiPickersUtilsProvider>\n      )}\n\n      <Row className=\"justify-content-center mt-5\">\n        <Col className=\"col-10 charts-container\">\n          {chartsLoading ? <Loader className=\"loader-div\"></Loader> : null}\n        </Col>\n      </Row>\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport Topbar from './components/topbar/topbar.js'\nimport Selection from './components/selection-box/selection.js'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Topbar></Topbar>\n      <Selection></Selection>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}