{"version":3,"sources":["components/topbar/topbar.js","components/dialog-box/location/location.js","urls.js","components/Loader/Loader.js","components/selection-box/selection.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","topPanel","backgroundColor","menuButton","marginRight","spacing","title","Topbar","classes","className","AppBar","position","Toolbar","IconButton","edge","aria-label","Typography","variant","height","maxWidth","Location","props","React","useState","setSelectedItem","tree","setData","useEffect","a","fetch","response","json","result","organisationUnits","filter","ou","level","TreeView","defaultCollapseIcon","defaultExpanded","defaultExpandIcon","renderTree","nodes","func","TreeItem","key","id","nodeId","label","name","onLabelClick","e","Array","isArray","children","map","node","v","preventDefault","onSelect","Loader","xmlns","version","in","stdDeviation","mode","values","Component","sleep","delay","Promise","resolve","setTimeout","Transition","forwardRef","ref","Slide","direction","Selection","selectedDate","setSelectedDate","selectedLocation","setSelectedLocation","AutocompleteOpen","setAutocompleteOpen","AutocompleteOptions","setAutocompleteOptions","indicatorsLoading","length","DialogOpen","setDialogOpen","DialogType","setDialogType","chartsLoading","setChartsLoading","handleDateChange","date","handleClickOpen","type","handleClose","active","data","indicators","Row","Col","Form","Autocomplete","freeSolo","open","onOpen","onClose","getOptionSelected","option","value","getOptionLabel","options","loading","renderInput","params","TextField","InputProps","endAdornment","Fragment","CircularProgress","color","size","Button","onClick","moment","format","Dialog","fullWidth","TransitionComponent","scroll","aria-labelledby","aria-describedby","DialogTitle","DialogContent","dividers","DialogContentText","tabIndex","location","DialogActions","utils","MomentUtils","margin","disableFuture","onChange","KeyboardButtonProps","TextFieldComponent","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e2f11cfe.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  topPanel: {\n      backgroundColor: '#1976d2'\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function Topbar() {\n        const classes = useStyles();\n        return (\n            <div className={classes.root}>\n            <AppBar position=\"static\" className={classes.topPanel}>\n                <Toolbar>\n                <IconButton edge=\"start\" className={classes.menuButton} aria-label=\"menu\">\n                </IconButton>\n                <Typography variant=\"h6\" className={classes.title}>\n                    INTERACTIVE DASHBOARD\n                </Typography>\n                </Toolbar>\n            </AppBar>\n            </div>\n        )\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TreeView from \"@material-ui/lab/TreeView\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport TreeItem from \"@material-ui/lab/TreeItem\";\nimport * as urls from \"../../../urls.js\";\n\nconst useStyles = makeStyles({\n  root: {\n    height: 240,\n    flexGrow: 1,\n    maxWidth: 400,\n  },\n});\n\nconst renderTree = (nodes, func) => (\n  <TreeItem key={nodes.id} nodeId={nodes.id} label={nodes.name} onLabelClick={(e) => func(e, nodes)}>\n    {Array.isArray(nodes.children)\n      ? nodes.children.map((node) => renderTree(node, func))\n      : null}\n  </TreeItem>\n);\n\nexport default function Location(props) {\n  const classes = useStyles();\n  const [selectedItem, setSelectedItem] = React.useState({});\n  const [tree, setData] = React.useState({});\n\n  const updateNode = (e,v) => {\n    e.preventDefault()\n    setSelectedItem(v);\n    props.onSelect(v);\n  }\n  React.useEffect(() => {\n    (async () => {\n      const response = await fetch(urls.orgunits);\n      const result = await response.json();\n      const tree = result.organisationUnits.filter((ou) => ou.level === 1)[0];\n      setData(tree);\n    })();\n  }, []);\n\n  return (\n    <TreeView\n      className={classes.root}\n      defaultCollapseIcon={<ExpandMoreIcon />}\n      defaultExpanded={[\"root\"]}\n      defaultExpandIcon={<ChevronRightIcon />}\n    >\n      {renderTree(tree, updateNode)}\n    </TreeView>\n  );\n}\n","export const countries = 'https://country.register.gov.uk/records.json?page-size=500'\nexport const indicators = 'https://who.aeturn.dev/api/v1.0/indicator'\nexport const orgunits = 'https://who.aeturn.dev/api/v1.0/orgunit'","import React from 'react';\nimport './Loader.css'\n\nexport default class Loader extends React.Component {\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"dot dot-1\"></div>\n                <div className=\"dot dot-2\"></div>\n                <div className=\"dot dot-3\"></div>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n                    <defs>\n                        <filter id=\"goo\">\n                            <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"10\" result=\"blur\" />\n                            <feColorMatrix in=\"blur\" mode=\"matrix\" values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 21 -7\" />\n                        </filter>\n                    </defs>\n                </svg>\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport { Form, Row, Col } from \"react-bootstrap\";\nimport Button from \"@material-ui/core/Button\";\nimport \"./selection.css\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport * as urls from \"../../urls.js\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport moment from \"moment\";\nimport MomentUtils from \"@date-io/moment\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from \"@material-ui/pickers\";\nimport Location from \"../dialog-box/location/location.js\";\nimport Slide from \"@material-ui/core/Slide\";\nimport Loader from \"../Loader/Loader.js\";\nfunction sleep(delay = 0) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, delay);\n  });\n}\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function Selection() {\n  const [selectedDate, setSelectedDate] = React.useState();\n  const [selectedLocation, setSelectedLocation] = React.useState({});\n  const [AutocompleteOpen, setAutocompleteOpen] = React.useState(false);\n  const [AutocompleteOptions, setAutocompleteOptions] = React.useState([]);\n  const indicatorsLoading =\n    AutocompleteOpen && AutocompleteOptions.length === 0;\n\n  const [DialogOpen, setDialogOpen] = React.useState(false);\n  const [DialogType, setDialogType] = React.useState(\"location\");\n  const [chartsLoading, setChartsLoading] = React.useState(false);\n\n  const handleDateChange = (date) => {\n    if (date) {\n      setSelectedDate(date);\n    }\n    setDialogOpen(false);\n  };\n\n  const updateLocation = (location) => {\n    setSelectedLocation(location);\n  };\n\n  const handleClickOpen = (type) => {\n    setDialogOpen(true);\n    setDialogType(type);\n  };\n\n  const handleClose = () => {\n    setSelectedLocation(\"\");\n    setDialogOpen(false);\n  };\n\n  const handleSave = () => {\n    setDialogOpen(false);\n  };\n\n  const loadingStart = () => {\n    setChartsLoading(true);\n  };\n\n  React.useEffect(() => {\n    let active = true;\n\n    if (!indicatorsLoading) {\n      return undefined;\n    }\n\n    (async () => {\n      const response = await fetch(urls.indicators);\n      await sleep(1000); // For demo purposes.\n      const data = await response.json();\n\n      if (active) {\n        setAutocompleteOptions(\n          data.indicators\n        );\n      }\n    })();\n\n    return () => {\n      active = false;\n    };\n  }, [indicatorsLoading]);\n\n  React.useEffect(() => {\n    if (!AutocompleteOpen) {\n      setAutocompleteOptions([]);\n    }\n  }, [AutocompleteOpen]);\n\n  return (\n    <div>\n      <Row className=\"justify-content-center align-items-center\">\n        <Col className=\"col-6 mt-5\">\n          <Form>\n            <Autocomplete\n              id=\"asynchronous-demo\"\n              freeSolo\n              open={AutocompleteOpen}\n              onOpen={() => {\n                setAutocompleteOpen(true);\n              }}\n              onClose={() => {\n                setAutocompleteOpen(false);\n              }}\n              getOptionSelected={(option, value) => option.name === value.name}\n              getOptionLabel={(option) => option.name}\n              options={AutocompleteOptions}\n              loading={indicatorsLoading}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Search Indicators\"\n                  variant=\"outlined\"\n                  InputProps={{\n                    ...params.InputProps,\n                    endAdornment: (\n                      <React.Fragment>\n                        {indicatorsLoading ? (\n                          <CircularProgress color=\"inherit\" size={20} />\n                        ) : null}\n                        {params.InputProps.endAdornment}\n                      </React.Fragment>\n                    ),\n                  }}\n                />\n              )}\n            />\n          </Form>\n        </Col>\n      </Row>\n      <Row className=\"justify-content-center\">\n        <Col className=\"col-4 mt-3 text-left\">\n          <Button\n            variant=\"contained\"\n            className={\"mr-2\" + (selectedLocation.name ? \" btn-checked\" : \"\")}\n            onClick={() => handleClickOpen(\"location\")}\n          >\n            <i className=\"material-icons\">\n              {selectedLocation ? \"check\" : \"add\"}\n            </i>\n            {selectedLocation.name ? selectedLocation.name : \"Select location\"}\n          </Button>\n          <Button\n            variant=\"contained\"\n            className={\"mx-2\" + (selectedDate ? \" btn-checked\" : \"\")}\n            onClick={() => handleClickOpen(\"date\")}\n          >\n            <i className=\"material-icons\">{selectedDate ? \"check\" : \"add\"}</i>\n            {selectedDate\n              ? moment(selectedDate).format(\"MMM DD, YYYY\")\n              : \"Select date\"}\n          </Button>\n        </Col>\n        <Col className=\"col-2 text-right mt-3\">\n          <Button\n            variant=\"contained\"\n            className=\"btn-primary\"\n            onClick={() => loadingStart()}\n          >\n            Done\n          </Button>\n        </Col>\n      </Row>\n      <Dialog\n        open={DialogOpen && DialogType === \"location\"}\n        onClose={handleClose}\n        fullWidth={true}\n        maxWidth=\"sm\"\n        TransitionComponent={Transition}\n        scroll={\"paper\"}\n        aria-labelledby=\"scroll-dialog-title\"\n        aria-describedby=\"scroll-dialog-description\"\n      >\n        <DialogTitle id=\"scroll-dialog-title\">\n          {DialogType === \"location\" ? \"Select location\" : \"Select Date\"}\n        </DialogTitle>\n        <DialogContent dividers={true}>\n          <DialogContentText id=\"scroll-dialog-description\" tabIndex={-1}>\n            <Location onSelect={updateLocation}></Location>\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleSave} color=\"primary\">\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n      {/* Date picker here */}\n      <MuiPickersUtilsProvider utils={MomentUtils}>\n        <KeyboardDatePicker\n          margin=\"normal\"\n          disableFuture\n          id=\"date-picker-dialog\"\n          label=\"Date picker dialog\"\n          format=\"MM/dd/yyyy\"\n          value={selectedDate}\n          onChange={handleDateChange}\n          onClose={handleDateChange}\n          KeyboardButtonProps={{\n            \"aria-label\": \"change date\",\n          }}\n          open={DialogOpen && DialogType === \"date\"}\n          TextFieldComponent={() => null}\n        />\n      </MuiPickersUtilsProvider>\n      <Row className=\"justify-content-center mt-5\">\n        <Col className=\"col-10 charts-container\">\n          {chartsLoading ? <Loader className=\"loader-div\"></Loader> : null}\n        </Col>\n      </Row>\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport Topbar from './components/topbar/topbar.js'\nimport Selection from './components/selection-box/selection.js'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Topbar></Topbar>\n      <Selection></Selection>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}