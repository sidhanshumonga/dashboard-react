{"version":3,"sources":["components/topbar/topbar.js","components/selection-box/selection.js","urls.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","topPanel","backgroundColor","menuButton","marginRight","spacing","title","Topbar","classes","className","AppBar","position","Toolbar","IconButton","edge","aria-label","Typography","variant","sleep","delay","Promise","resolve","setTimeout","Selection","React","useState","selectedDate","setSelectedDate","handleDateChange","date","setDialogOpen","AutocompleteOpen","setAutocompleteOpen","AutocompleteOptions","setAutocompleteOptions","loading","length","DialogOpen","DialogType","setDialogType","handleClickOpen","type","useEffect","active","a","fetch","response","json","countries","Object","keys","map","key","item","Row","Col","Form","Autocomplete","id","freeSolo","open","onOpen","onClose","getOptionSelected","option","value","name","getOptionLabel","options","renderInput","params","TextField","label","InputProps","endAdornment","Fragment","CircularProgress","color","size","Button","onClick","moment","format","Dialog","scroll","aria-labelledby","aria-describedby","DialogTitle","DialogContent","dividers","DialogContentText","tabIndex","utils","MomentUtils","margin","disableFuture","onChange","KeyboardButtonProps","TextFieldComponent","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.506f6845.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  topPanel: {\n      backgroundColor: '#1976d2'\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function Topbar() {\n        const classes = useStyles();\n        return (\n            <div className={classes.root}>\n            <AppBar position=\"static\" className={classes.topPanel}>\n                <Toolbar>\n                <IconButton edge=\"start\" className={classes.menuButton} aria-label=\"menu\">\n                </IconButton>\n                <Typography variant=\"h6\" className={classes.title}>\n                    INTERACTIVE DASHBOARD\n                </Typography>\n                </Toolbar>\n            </AppBar>\n            </div>\n        )\n}\n","import React from \"react\";\nimport { Form, Row, Col } from \"react-bootstrap\";\nimport Button from \"@material-ui/core/Button\";\nimport \"./selection.css\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport * as urls from \"../../urls.js\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport moment from \"moment\";\nimport MomentUtils from \"@date-io/moment\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from \"@material-ui/pickers\";\n\nfunction sleep(delay = 0) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, delay);\n  });\n}\n\nexport default function Selection() {\n  const [selectedDate, setSelectedDate] = React.useState();\n\n  const handleDateChange = (date) => {\n    if (date) {\n      setSelectedDate(date);\n    }\n    setDialogOpen(false);\n  };\n\n  const [AutocompleteOpen, setAutocompleteOpen] = React.useState(false);\n  const [AutocompleteOptions, setAutocompleteOptions] = React.useState([]);\n  const loading = AutocompleteOpen && AutocompleteOptions.length === 0;\n\n  const [DialogOpen, setDialogOpen] = React.useState(false);\n  const [DialogType, setDialogType] = React.useState(\"location\");\n\n  const handleClickOpen = (type) => {\n    setDialogOpen(true);\n    setDialogType(type);\n  };\n\n  const handleClose = () => {\n    setDialogOpen(false);\n  };\n\n  React.useEffect(() => {\n    let active = true;\n\n    if (!loading) {\n      return undefined;\n    }\n\n    (async () => {\n      const response = await fetch(urls.countries);\n      await sleep(1000); // For demo purposes.\n      const countries = await response.json();\n\n      if (active) {\n        setAutocompleteOptions(\n          Object.keys(countries).map((key) => countries[key].item[0])\n        );\n      }\n    })();\n\n    return () => {\n      active = false;\n    };\n  }, [loading]);\n\n  React.useEffect(() => {\n    if (!AutocompleteOpen) {\n      setAutocompleteOptions([]);\n    }\n  }, [AutocompleteOpen]);\n\n  return (\n    <div>\n      <Row className=\"justify-content-center align-items-center\">\n        <Col className=\"col-6 mt-5\">\n          <Form>\n            <Autocomplete\n              id=\"asynchronous-demo\"\n              freeSolo\n              open={AutocompleteOpen}\n              onOpen={() => {\n                setAutocompleteOpen(true);\n              }}\n              onClose={() => {\n                setAutocompleteOpen(false);\n              }}\n              getOptionSelected={(option, value) => option.name === value.name}\n              getOptionLabel={(option) => option.name}\n              options={AutocompleteOptions}\n              loading={loading}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Search Indicators\"\n                  variant=\"outlined\"\n                  InputProps={{\n                    ...params.InputProps,\n                    endAdornment: (\n                      <React.Fragment>\n                        {loading ? (\n                          <CircularProgress color=\"inherit\" size={20} />\n                        ) : null}\n                        {params.InputProps.endAdornment}\n                      </React.Fragment>\n                    ),\n                  }}\n                />\n              )}\n            />\n          </Form>\n        </Col>\n      </Row>\n      <Row className=\"justify-content-center\">\n        <Col className=\"col-4 mt-3 text-left\">\n          <Button\n            variant=\"contained\"\n            className=\"mr-2\"\n            onClick={() => handleClickOpen(\"location\")}\n          >\n            <i className=\"material-icons\">add</i>\n            Select location\n          </Button>\n          <Button\n            variant=\"contained\"\n            className={\"mx-2\" + (selectedDate ? \" btn-checked\" : \"\")}\n            onClick={() => handleClickOpen(\"date\")}\n          >\n            <i className=\"material-icons\">{selectedDate ? \"check\" : \"add\"}</i>\n            {selectedDate\n              ? moment(selectedDate).format(\"MMM DD, YYYY\")\n              : \"Select date\"}\n          </Button>\n        </Col>\n        <Col className=\"col-2 text-right mt-3\">\n          <Button variant=\"contained\" className=\"btn-primary\">\n            Done\n          </Button>\n        </Col>\n      </Row>\n      <Dialog\n        open={DialogOpen && DialogType === \"location\"}\n        onClose={handleClose}\n        scroll={\"paper\"}\n        aria-labelledby=\"scroll-dialog-title\"\n        aria-describedby=\"scroll-dialog-description\"\n      >\n        <DialogTitle id=\"scroll-dialog-title\">\n          {DialogType === \"location\" ? \"Select location\" : \"Select Date\"}\n        </DialogTitle>\n        <DialogContent dividers={true}>\n          <DialogContentText\n            id=\"scroll-dialog-description\"\n            tabIndex={-1}\n          ></DialogContentText>\n        </DialogContent>\n      </Dialog>\n      {/* Date picker here */}\n      <MuiPickersUtilsProvider utils={MomentUtils}>\n        <KeyboardDatePicker\n          margin=\"normal\"\n          disableFuture\n          id=\"date-picker-dialog\"\n          label=\"Date picker dialog\"\n          format=\"MM/dd/yyyy\"\n          value={selectedDate}\n          onChange={handleDateChange}\n          onClose={handleDateChange}\n          KeyboardButtonProps={{\n            \"aria-label\": \"change date\",\n          }}\n          open={DialogOpen && DialogType === \"date\"}\n          TextFieldComponent={() => null}\n        />\n      </MuiPickersUtilsProvider>\n    </div>\n  );\n}\n","export const countries = 'https://country.register.gov.uk/records.json?page-size=500'\nexport const indicators = 'https://play.dhis2.org/2.34.0/api/programIndicators.json?paging=false'","import React from 'react';\nimport './App.css';\nimport Topbar from './components/topbar/topbar.js'\nimport Selection from './components/selection-box/selection.js'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Topbar></Topbar>\n      <Selection></Selection>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}