{"version":3,"sources":["components/topbar/topbar.js","CONSTANTS.js","components/dialog-box/location/location.js","Utils.js","components/dialog-box/period/period.js","components/loader/loader.js","components/selection-box/selection.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","topPanel","backgroundColor","menuButton","marginRight","spacing","title","Topbar","classes","className","AppBar","position","Toolbar","IconButton","edge","aria-label","Typography","variant","DIALOG_TYPE","PARAMETERS","LOGO","PERIOD_TYPES","id","name","MONTHS","QUARTERS","SIX_MONTHS","height","maxWidth","selected","content","background","Location","props","React","useState","setSelectedItem","TreeView","defaultCollapseIcon","defaultExpanded","defaultExpandIcon","renderTree","nodes","func","TreeItem","key","nodeId","label","onLabelClick","e","Array","isArray","children","map","node","tree","v","preventDefault","onSelect","getDailyArray","year","eachDayOfInterval","start","Date","end","date","moment","format","getWeeklyArray","eachWeekOfInterval","index","add","getYearlyPeriodArray","mutedYear","parseInt","yearsArray","i","push","getYearlyArray","unshift","formControl","minWidth","periodBox","marginTop","marginLeft","border","borderRadius","overflow","padding","paperRoot","listStyle","margin","boxShadow","Period","checked","setChecked","selectedPeriodType","setSelectedPeriodType","openYearSelect","setOpenYearSelect","selectedYear","setSelectedYear","UTILS","dropdownYears","setDropdownYears","periodArray","setPeriodArray","updatePeriod","period","x","handleToggle","value","currentIndex","findIndex","newChecked","splice","useEffect","CONSTANTS","month","quarters","quarter","months","Row","Col","FormControl","InputLabel","Select","onChange","event","target","MenuItem","onClose","onOpen","open","Icon","List","ListItem","role","undefined","dense","button","onClick","ListItemIcon","Checkbox","tabIndex","disableRipple","j","Paper","component","data","Chip","onDelete","Loader","xmlns","version","in","stdDeviation","result","mode","values","Component","icon","fontSize","checkedIcon","Transition","forwardRef","ref","Slide","direction","params","a","requestOptions","method","headers","body","JSON","stringify","fetch","Utils","response","json","console","log","Selection","selectedPeriod","setSelectedPeriod","selectedLocation","setSelectedLocation","selectedIndicators","setSelectedIndicators","AutocompleteOpen","setAutocompleteOpen","AutocompleteOptions","setAutocompleteOptions","indicatorsLoading","length","DialogOpen","setDialogOpen","DialogType","setDialogType","chartsLoading","setChartsLoading","setData","handleClickOpen","type","handleClose","loadingStart","payload","orgunit_name","orgunit_id","indicators","sendSearchParsms","active","filter","periodType","organisationUnits","Form","Autocomplete","multiple","freeSolo","getOptionSelected","option","getOptionLabel","options","disableCloseOnSelect","loading","updateIndicatorsArray","renderOption","Fragment","style","renderInput","TextField","InputProps","endAdornment","CircularProgress","color","size","Button","Dialog","fullWidth","TransitionComponent","scroll","aria-labelledby","aria-describedby","DialogTitle","DialogContent","dividers","DialogContentText","location","DialogActions","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.68124ab1.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  topPanel: {\n      backgroundColor: '#1976d2'\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function Topbar() {\n        const classes = useStyles();\n        return (\n            <div className={classes.root}>\n            <AppBar position=\"static\" className={classes.topPanel}>\n                <Toolbar>\n                <IconButton edge=\"start\" className={classes.menuButton} aria-label=\"menu\">\n                </IconButton>\n                <Typography variant=\"h6\" className={classes.title}>\n                    INTERACTIVE DASHBOARD\n                </Typography>\n                </Toolbar>\n            </AppBar>\n            </div>\n        )\n}\n","export const indicators = \"api/v1.0/indicator\";\nexport const dataelements = \"api/v1.0/dataelement\";\nexport const orgunits = \"api/v1.0/orgunit\";\nexport const postSearchReq = \"api/v1.0/search\";\n\nexport const DIALOG_TYPE = {\n  LOCATION: \"location\",\n  DATE: \"date\",\n};\n\nexport const PARAMETERS = {\n  SELECT_LOCATION: \"Select Location\",\n  SELECT_PERIOD: \"Select Period\",\n};\n\nexport const LOGO = {\n  CHECK: \"check\",\n  ADD: \"add\",\n};\n\nexport const PERIOD_TYPES = [\n  { id: \"d\", name: \"Daily\" },\n  { id: \"w\", name: \"Weekly\" },\n  { id: \"m\", name: \"Monthly\" },\n  { id: \"q\", name: \"Quarterly\" },\n  { id: \"sm\", name: \"Six-monthly\" },\n  { id: \"y\", name: \"Yearly\" },\n];\n\nexport const MONTHS = [\n  { id: \"01\", name: \"January\" },\n  { id: \"02\", name: \"February\" },\n  { id: \"03\", name: \"March\" },\n  { id: \"04\", name: \"April\" },\n  { id: \"05\", name: \"May\" },\n  { id: \"06\", name: \"June\" },\n  { id: \"07\", name: \"July\" },\n  { id: \"08\", name: \"August\" },\n  { id: \"09\", name: \"September\" },\n  { id: \"10\", name: \"October\" },\n  { id: \"11\", name: \"November\" },\n  { id: \"12\", name: \"December\" },\n];\n\nexport const QUARTERS = [\n  { id: \"Q1\", name: \"January - March\" },\n  { id: \"Q2\", name: \"April - June\" },\n  { id: \"Q3\", name: \"July - September\" },\n  { id: \"Q4\", name: \"October - December\" },\n]\n\nexport const SIX_MONTHS = [\n  { id: \"S1\", name: \"January - June\" },\n  { id: \"S2\", name: \"July - December\" },]\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TreeView from \"@material-ui/lab/TreeView\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport TreeItem from \"@material-ui/lab/TreeItem\";\nimport './location.css';\n\nconst useStyles = makeStyles({\n  root: {\n    height: 350,\n    flexGrow: 1,\n    maxWidth: 400,\n  },\n  selected: {\n    content : {\n      background: 'blue'\n    }\n  }\n});\n\nconst renderTree = (nodes, func, classes) => (\n  <TreeItem key={nodes.id} nodeId={nodes.id} label={nodes.name} onLabelClick={(e) => func(e, nodes)} classes={{selected: classes.selected}}>\n    {Array.isArray(nodes.children)\n      ? nodes.children.map((node) => renderTree(node, func, classes))\n      : null}\n  </TreeItem>\n);\n\nexport default function Location(props) {\n  const classes = useStyles();\n  const [selectedItem, setSelectedItem] = React.useState({});\n\n  const updateNode = (e,v) => {\n    e.preventDefault()\n    setSelectedItem(v);\n    props.onSelect(v);\n  }\n \n\n  return (\n    <TreeView\n      className={classes.root}\n      defaultCollapseIcon={<ExpandMoreIcon />}\n      defaultExpanded={[\"root\"]}\n      defaultExpandIcon={<ChevronRightIcon />}\n    >\n      {renderTree(props.tree, updateNode, classes)}\n    </TreeView>\n  );\n}\n","import { eachDayOfInterval, eachWeekOfInterval } from \"date-fns\";\nimport moment from \"moment\";\n\nexport const getBaseUrl = () => {\n  const baseUrl = \"https://who.aeturn.dev/\"; //server calls\n  return baseUrl;\n};\n\nexport const getDailyArray = (year) => {\n  var arrayOfDates = eachDayOfInterval({\n    start: new Date(year, 0, 1),\n    end: new Date(year, 11, 31),\n  });\n\n  return arrayOfDates.map((date) => {\n    return {\n      id: moment(date).format(\"YYYYMMDD\"),\n      name: moment(date).format(\"YYYY-MM-DD\"),\n    };\n  });\n};\n\nexport const getWeeklyArray = (year) => {\n  var arrayOfWeeks = eachWeekOfInterval({\n    start: new Date(year, 0, 1),\n    end: new Date(year, 11, 31),\n  });\n  return arrayOfWeeks.map((date, index) => {\n    return {\n      id: index + 1 < 10 ? \"W0\" + (index + 1) : \"W\" + (index + 1),\n      name:\n        moment(date).format(\"YYYY-MM-DD\") +\n        \" - \" +\n        moment(date).add(6, \"d\").format(\"YYYY-MM-DD\"),\n    };\n  });\n};\n\nexport const getMonthlyArray = (months, year) => {\n  return months.map((month) => {\n    return { id: year + month.id, name: month.name + ' ' + year};\n  });\n};\n\nexport const getQuarterlyArray = (quarters, year) => {\n  return quarters.map((quarter) => {\n    return { id: year + quarter.id, name: quarter.name + ' ' + year };\n  });\n};\n\nexport const getSixMonthlyArray = (months, year) => {\n  return months.map((month) => {\n    return { id: year + month.id, name: month.name + ' ' + year };\n  });\n};\n\nexport const getYearlyPeriodArray = (year) => {\n  var mutedYear = parseInt(year);\n  var yearsArray = [{ id: mutedYear, name: mutedYear }];\n  for (let i = 1; i < 10; i++) {\n    yearsArray.push({ id: mutedYear - i, name: mutedYear - i });\n  }\n  return yearsArray;\n};\n\nexport const getYearlyArray = (year) => {\n  var mutedYear = parseInt(year);\n  var yearsArray = [mutedYear];\n  for (let i = 1; i < 5; i++) {\n    yearsArray.push(mutedYear + i);\n    yearsArray.unshift(mutedYear - i);\n  }\n  return yearsArray;\n};\n","import React from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport \"./period.css\";\nimport * as CONSTANTS from \"../../../CONSTANTS.js\";\nimport moment from \"moment\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport * as UTILS from \"../../../Utils.js\";\nimport Icon from \"@material-ui/core/Icon\";\n\nimport Chip from \"@material-ui/core/Chip\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst useStyles = makeStyles({\n  root: {\n    height: 350,\n    flexGrow: 1,\n  },\n  formControl: {\n    minWidth: \"120px\",\n    marginRight: 20,\n  },\n  periodBox: {\n    height: 280,\n    marginTop: 20,\n    marginLeft: 10,\n    border: \"1px solid lightgray\",\n    borderRadius: 4,\n    overflow: \"scroll\",\n    padding: 0,\n  },\n  paperRoot: {\n    height: 350,\n    listStyle: \"none\",\n    padding: 1,\n    margin: 0,\n    overflow: \"scroll\",\n    border: \"1px solid lightgray\",\n    borderRadius: 4,\n    boxShadow: \"none\",\n  },\n});\n\nexport default function Period(props) {\n  const classes = useStyles();\n\n  const [checked, setChecked] = React.useState([]);\n  const [selectedPeriodType, setSelectedPeriodType] = React.useState(\"m\");\n  const [openYearSelect, setOpenYearSelect] = React.useState(false);\n  const [selectedYear, setSelectedYear] = React.useState(\n    parseInt(moment(new Date()).format(\"YYYY\"))\n  );\n  const [dropdownYears, setDropdownYears] = React.useState(\n    UTILS.getYearlyArray(selectedYear, 9)\n  );\n  const [periodArray, setPeriodArray] = React.useState([]);\n\n  const updatePeriod = (period) => {\n    setChecked(period);\n    props.onSelect(period.map((x) => x.id));\n  };\n\n  const handleToggle = (value) => () => {\n    const currentIndex = checked.findIndex((i) => i.id === value.id);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n    updatePeriod(newChecked);\n  };\n\n  const removeSelectedPeriod = (value) => () => {\n    const currentIndex = checked.findIndex((i) => i.id === value.id);\n    const newChecked = [...checked];\n    newChecked.splice(currentIndex, 1);\n    updatePeriod(newChecked);\n  };\n\n  const handlePeriodTypeChange = (event) => {\n    setSelectedPeriodType(event.target.value);\n  };\n\n  const handleSelectedYearChange = (event) => {\n    if (event.target.value !== \"prev\" && event.target.value !== \"next\") {\n      if (selectedPeriodType === \"y\") {\n        setPeriodArray(UTILS.getYearlyPeriodArray(event.target.value));\n      } else if (selectedPeriodType === \"d\") {\n        setPeriodArray(UTILS.getDailyArray(event.target.value));\n      } else if (selectedPeriodType === \"w\") {\n        setPeriodArray(UTILS.getWeeklyArray(event.target.value));\n      }\n\n      setSelectedYear(event.target.value);\n      setOpenYearSelect(false);\n    } else {\n      if (event.target.value === \"prev\") {\n        setDropdownYears(UTILS.getYearlyArray(dropdownYears[0] - 1));\n      } else {\n        setDropdownYears(UTILS.getYearlyArray(dropdownYears[8] + 1));\n      }\n      setOpenYearSelect(true);\n    }\n  };\n\n  React.useEffect(() => {\n    switch (selectedPeriodType) {\n      case \"d\": {\n        setPeriodArray(UTILS.getDailyArray(selectedYear));\n        break;\n      }\n      case \"w\": {\n        setPeriodArray(UTILS.getWeeklyArray(selectedYear));\n        break;\n      }\n      case \"m\": {\n        setPeriodArray(UTILS.getMonthlyArray(CONSTANTS.MONTHS, selectedYear));\n        break;\n      }\n      case \"q\": {\n        setPeriodArray(\n          UTILS.getQuarterlyArray(CONSTANTS.QUARTERS, selectedYear)\n        );\n        break;\n      }\n      case \"sm\": {\n        setPeriodArray(\n          UTILS.getSixMonthlyArray(CONSTANTS.SIX_MONTHS, selectedYear)\n        );\n        break;\n      }\n      case \"y\": {\n        setPeriodArray(UTILS.getYearlyPeriodArray(selectedYear));\n        break;\n      }\n    }\n  }, [selectedPeriodType, selectedYear]);\n\n  return (\n    <Row className={classes.root}>\n      <Col className=\"col col-lg-8 col-md-8 col-sm-8\">\n        <Row>\n          <Col>\n            <FormControl className={classes.formControl}>\n              <InputLabel>Period type</InputLabel>\n              <Select\n                onChange={handlePeriodTypeChange}\n                value={selectedPeriodType}\n              >\n                {CONSTANTS.PERIOD_TYPES.map((period) => (\n                  <MenuItem value={period.id}>{period.name}</MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n            <FormControl className={classes.formControl}>\n              <InputLabel>Year</InputLabel>\n              <Select\n                className=\"year-selection\"\n                onChange={handleSelectedYearChange}\n                onClose={() => {\n                  setOpenYearSelect(false);\n                }}\n                onOpen={() => {\n                  setOpenYearSelect(true);\n                }}\n                value={selectedYear}\n                open={openYearSelect}\n              >\n                <MenuItem value=\"prev\">\n                  <Icon>expand_less</Icon>\n                </MenuItem>\n                {dropdownYears.map((year) => (\n                  <MenuItem value={year}>{year}</MenuItem>\n                ))}\n                <MenuItem value=\"next\">\n                  <Icon>expand_more</Icon>\n                </MenuItem>\n              </Select>\n            </FormControl>\n          </Col>\n        </Row>\n        <Row>\n          <Col className={classes.periodBox}>\n            <List>\n              {periodArray.map((value, index) => {\n                return (\n                  <ListItem\n                    key={index}\n                    role={undefined}\n                    dense\n                    button\n                    onClick={handleToggle(value)}\n                  >\n                    <ListItemIcon>\n                      <Checkbox\n                        edge=\"start\"\n                        tabIndex={-1}\n                        disableRipple\n                        checked={\n                          checked.findIndex((j) => j.id === value.id) !== -1\n                        }\n                      />\n                    </ListItemIcon>\n                    {selectedPeriodType === \"w\"\n                      ? \"WEEK \" + (index + 1) + \" - \" + value.name\n                      : value.name}\n                  </ListItem>\n                );\n              })}\n            </List>\n          </Col>\n        </Row>\n      </Col>\n      <Col className=\"col col-lg-4 col-md-4 col-sm-4\">\n        <Paper component=\"ul\" className={classes.paperRoot}>\n          {checked.map((data) => {\n            return (\n              <li key={data.key}>\n                <Chip\n                  label={data.name}\n                  onDelete={removeSelectedPeriod(data)}\n                  className=\"my-1 ml-2\"\n                />\n              </li>\n            );\n          })}\n        </Paper>\n      </Col>\n    </Row>\n  );\n}\n","import React from \"react\";\nimport './loader.css'\n\nexport default class Loader extends React.Component {\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"dot dot-1\"></div>\n                <div className=\"dot dot-2\"></div>\n                <div className=\"dot dot-3\"></div>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n                    <defs>\n                        <filter id=\"goo\">\n                            <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"10\" result=\"blur\" />\n                            <feColorMatrix in=\"blur\" mode=\"matrix\" values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 21 -7\" />\n                        </filter>\n                    </defs>\n                </svg>\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport { Form, Row, Col } from \"react-bootstrap\";\nimport Button from \"@material-ui/core/Button\";\nimport \"./selection.css\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport * as CONSTANTS from \"../../CONSTANTS.js\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\n// import moment from \"moment\";\n// import MomentUtils from \"@date-io/moment\";\n// import { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\n// import { DatePicker } from \"@material-ui/pickers\";\nimport Location from \"../dialog-box/location/location.js\";\nimport Period from \"../dialog-box/period/period.js\"\nimport Slide from \"@material-ui/core/Slide\";\nimport Loader from \"../loader/loader.js\";\nimport CheckBoxOutlineBlankIcon from \"@material-ui/icons/CheckBoxOutlineBlank\";\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\nimport * as Utils from \"../../Utils.js\";\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\n\nfunction sleep(delay = 0) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, delay);\n  });\n}\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nasync function sendSearchParsms(params) {\n  const requestOptions = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(params),\n  };\n  const response = await fetch(\n    Utils.getBaseUrl() + CONSTANTS.postSearchReq,\n    requestOptions\n  );\n  const data = await response.json();\n  console.log(data);\n}\n\nexport default function Selection() {\n  const [selectedPeriod, setSelectedPeriod] = React.useState([]);\n  const [selectedLocation, setSelectedLocation] = React.useState({});\n  const [selectedIndicators, setSelectedIndicators] = React.useState([]);\n  const [AutocompleteOpen, setAutocompleteOpen] = React.useState(false);\n  const [AutocompleteOptions, setAutocompleteOptions] = React.useState([]);\n  const indicatorsLoading =\n    AutocompleteOpen && AutocompleteOptions.length === 0;\n\n  const [DialogOpen, setDialogOpen] = React.useState(false);\n  const [DialogType, setDialogType] = React.useState(\n    CONSTANTS.DIALOG_TYPE.LOCATION\n  );\n  const [chartsLoading, setChartsLoading] = React.useState(false);\n\n  const [tree, setData] = React.useState({});\n\n  const updateLocation = (location) => {\n    setSelectedLocation(location);\n  };\n\n  const updatePeriod = (period) => {\n    setSelectedPeriod(period)\n  }\n\n  const handleClickOpen = (type) => {\n    setDialogOpen(true);\n    setDialogType(type);\n  };\n\n  const handleClose = () => {\n    setSelectedLocation(\"\");\n    setDialogOpen(false);\n  };\n\n  const handleSave = () => {\n    setDialogOpen(false);\n  };\n\n  const loadingStart = () => {\n    setChartsLoading(true);\n    const payload = {\n      date: selectedPeriod,\n      orgunit_name: selectedLocation.name,\n      orgunit_id: selectedLocation.id,\n      indicators: selectedIndicators.map((i) => i.name),\n    };\n    sendSearchParsms(payload);\n    console.log(payload)\n  };\n\n  const updateIndicatorsArray = (indicators) => {\n    setSelectedIndicators(indicators);\n  };\n\n  React.useEffect(() => {\n    let active = true;\n\n    if (!indicatorsLoading) {\n      return undefined;\n    }\n\n    (async () => {\n      const response = await fetch(Utils.getBaseUrl() + CONSTANTS.dataelements);\n      // await sleep(1000); // For demo purposes.\n      const data = await response.json();\n      // filter data elements if no period is there.\n      if (active) {\n        setAutocompleteOptions(\n          data.filter((x) => {\n            if (x.periodType.length > 0) {\n              return {\n                ...x,\n                periodType: x.periodType[0],\n              };\n            }\n          })\n        );\n      }\n    })();\n\n    return () => {\n      active = false;\n    };\n  }, [indicatorsLoading]);\n\n  React.useEffect(() => {\n    if (!AutocompleteOpen) {\n      setAutocompleteOptions([]);\n    }\n  }, [AutocompleteOpen]);\n\n  React.useEffect(() => {\n    (async () => {\n      const response = await fetch(Utils.getBaseUrl() + CONSTANTS.orgunits);\n      const result = await response.json();\n      const tree = result.organisationUnits[0];\n      setData(tree);\n    })();\n  }, []);\n\n  return (\n    <div>\n      <Row className=\"justify-content-center align-items-center\">\n        <Col className=\"col-8 mt-5\">\n          <Form>\n            <Autocomplete\n              id=\"asynchronous-demo\"\n              multiple\n              freeSolo\n              open={AutocompleteOpen}\n              onOpen={() => {\n                setAutocompleteOpen(true);\n              }}\n              onClose={() => {\n                setAutocompleteOpen(false);\n              }}\n              getOptionSelected={(option, value) => option.name === value.name}\n              getOptionLabel={(option) => option.name}\n              options={AutocompleteOptions}\n              disableCloseOnSelect\n              loading={indicatorsLoading}\n              onChange={(event, value) => updateIndicatorsArray(value)}\n              renderOption={(option, { selected }) => (\n                <React.Fragment>\n                  <Checkbox\n                    icon={icon}\n                    checkedIcon={checkedIcon}\n                    style={{ marginRight: 8 }}\n                    checked={selected}\n                  />\n                  {option.name}\n                  <Col className=\"text-right periodTypeInList\">\n                    {option.periodType}\n                  </Col>\n                </React.Fragment>\n              )}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Search Indicators\"\n                  variant=\"outlined\"\n                  InputProps={{\n                    ...params.InputProps,\n                    endAdornment: (\n                      <React.Fragment>\n                        {indicatorsLoading ? (\n                          <CircularProgress color=\"inherit\" size={20} />\n                        ) : null}\n                        {params.InputProps.endAdornment}\n                      </React.Fragment>\n                    ),\n                  }}\n                />\n              )}\n            />\n          </Form>\n        </Col>\n      </Row>\n      <Row className=\"justify-content-center\">\n        <Col className=\"col-5 mt-3 text-left\">\n          <Button\n            variant=\"contained\"\n            className={\"mr-2\" + (selectedLocation.name ? \" btn-checked\" : \"\")}\n            onClick={() => handleClickOpen(CONSTANTS.DIALOG_TYPE.LOCATION)}\n          >\n            <i className=\"material-icons\">\n              {selectedLocation.name\n                ? CONSTANTS.LOGO.CHECK\n                : CONSTANTS.LOGO.ADD}\n            </i>\n            {selectedLocation.name\n              ? selectedLocation.name\n              : CONSTANTS.PARAMETERS.SELECT_LOCATION}\n          </Button>\n          <Button\n            variant=\"contained\"\n            className={\"mx-2\" + (selectedPeriod.length ? \" btn-checked\" : \"\")}\n            onClick={() => handleClickOpen(CONSTANTS.DIALOG_TYPE.DATE)}\n          >\n            <i className=\"material-icons\">\n              {selectedPeriod.length\n                ? CONSTANTS.LOGO.CHECK\n                : CONSTANTS.LOGO.ADD}\n            </i>\n            {selectedPeriod.length\n              ? \"Period: \" + selectedPeriod.length + \" selected\"\n              : \"Select Period\"}\n          </Button>\n        </Col>\n        <Col className=\"col-3 text-right mt-3 d-flex justify-content-end\">\n          <Col className=\"mx-2 mt-1\">Clear dashboard</Col>\n          <Button\n            variant=\"contained\"\n            className=\"btn-primary\"\n            onClick={() => loadingStart()}\n          >\n            Add\n          </Button>\n        </Col>\n      </Row>\n      <Dialog\n        open={DialogOpen}\n        onClose={handleClose}\n        fullWidth={true}\n        maxWidth=\"sm\"\n        className=\"dialogNoPadding\"\n        TransitionComponent={Transition}\n        scroll={\"paper\"}\n        aria-labelledby=\"scroll-dialog-title\"\n        aria-describedby=\"scroll-dialog-description\"\n      >\n        <DialogTitle id=\"scroll-dialog-title\">\n          {DialogType === CONSTANTS.DIALOG_TYPE.LOCATION\n            ? CONSTANTS.PARAMETERS.SELECT_LOCATION\n            : CONSTANTS.PARAMETERS.SELECT_PERIOD}\n        </DialogTitle>\n        <DialogContent dividers={true}>\n          <DialogContentText id=\"scroll-dialog-description\" tabIndex={-1}>\n            {DialogType === CONSTANTS.DIALOG_TYPE.LOCATION ? (\n              <Location onSelect={updateLocation} tree={tree}></Location>\n            ) : (\n              <Period onSelect={updatePeriod}></Period>\n            )}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleSave} color=\"primary\">\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <Row className=\"justify-content-center mt-5\">\n        <Col className=\"col-10 charts-container\">\n          {chartsLoading ? <Loader className=\"loader-div\"></Loader> : null}\n        </Col>\n      </Row>\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport Topbar from './components/topbar/topbar.js'\nimport Selection from './components/selection-box/selection.js'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Topbar></Topbar>\n      <Selection></Selection>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}